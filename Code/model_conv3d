# set the matplotlib backend so figures can be saved in the background
import matplotlib
matplotlib.use("Agg")
# import the necessary packages
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import AveragePooling2D, AveragePooling3D
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dropout, LSTM
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.optimizers import SGD
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import numpy as np
import argparse
import pickle
import cv2
import os
import random
import glob
from keras.utils import to_categorical
from keras.layers.core import Lambda
from keras.models import Sequential, Input, Model
from keras.layers import Dense, Flatten, Conv3D, MaxPooling3D, Dropout, BatchNormalization, Activation, LeakyReLU, Add, Multiply
from keras.regularizers import l2
from keras.layers.core import Lambda
from keras.layers.core import Lambda

source_path = os.getcwd() + "/RWF-2000_preprocessed_64"

train_violence = source_path + "/train/Fight"
train_non = source_path + "/train/NonFight"
valid_violence = source_path + "/val/Fight"
valid_non = source_path + "/val/NonFight"

def sample(data_source, batch_size):
    files = sorted(glob.glob(data_source + '/*.npy'))
    arrays = []
    for i in range(batch_size):
        f = random.choice(files)
        a = np.load(f)
        arrays.append(a)
    return (arrays)

# create train database
def preprocess(violence, non, batch_size):

    x_violence_data = sample(violence, batch_size)
    x_non_data = sample(non, batch_size)

    y_violence_data, y_non_data = np.ones(len(x_violence_data)), np.zeros(len(x_non_data))

    #x_violence = np.vstack(x_violence_data)
    #x_non = np.vstack(x_non_data)

    y_violence = np.hstack(y_violence_data)
    y_non = np.hstack(y_non_data)

    y_violence = np.array(y_violence)
    y_non = np.array(y_non)

    x_violence_data = np.array(x_violence_data)
    x_non_data = np.array(x_non_data)

    return x_violence_data, x_non_data, y_violence, y_non



x_train_violence, x_train_non, y_train_violence, y_train_non = preprocess(train_violence, train_non, 64)

x_test_violence, x_test_non, y_test_violence, y_test_non = preprocess(train_violence, train_non, 16)

y_train, y_test = np.hstack((y_train_violence,y_train_non)), np.hstack((y_test_violence,y_test_non))
y_train, y_test = to_categorical(y_train, num_classes=2), to_categorical(y_test, num_classes=2)

print(y_train.shape,y_test.shape)

x_train, x_test = np.vstack((x_train_violence,x_train_non)), np.vstack((x_test_violence,x_test_non))

print(x_train.shape,x_test.shape)







# extract the rgb images
def get_rgb(input_x):
    rgb = input_x[...,:3]
    return rgb

# extract the optical flows
def get_opt(input_x):
    opt= input_x[...,3:5]
    return opt

inputs = Input(shape=(149,64,64,5))

rgb = Lambda(get_rgb,output_shape=None)(inputs)
opt = Lambda(get_opt,output_shape=None)(inputs)

##################################################### RGB channel
rgb = Conv3D(
    4, kernel_size=(1,3,3), strides=(1,1,1), kernel_initializer='he_normal', activation='relu', padding='same')(rgb)
rgb = Conv3D(
    4, kernel_size=(3,1,1), strides=(1,1,1), kernel_initializer='he_normal', activation='relu', padding='same')(rgb)
rgb = MaxPooling3D(pool_size=(1,2,2))(rgb)

print(rgb.shape)
##################################################### Optical Flow channel
opt = Conv3D(
    4, kernel_size=(1,3,3), strides=(1,1,1), kernel_initializer='he_normal', activation='relu', padding='same')(opt)
opt = Conv3D(
    4, kernel_size=(3,1,1), strides=(1,1,1), kernel_initializer='he_normal', activation='relu', padding='same')(opt)
opt = MaxPooling3D(pool_size=(1,2,2))(opt)

print(opt.shape)
##################################################### Fusion and Pooling
x = Multiply()([rgb,opt])
x = MaxPooling3D(pool_size=(8,1,1))(x)

print(x.shape)
##################################################### Merging Block
x = Conv3D(
    16, kernel_size=(1,3,3), strides=(1,1,1), kernel_initializer='he_normal', activation='relu', padding='same')(x)
x = Conv3D(
    16, kernel_size=(3,1,1), strides=(1,1,1), kernel_initializer='he_normal', activation='relu', padding='same')(x)
x = MaxPooling3D(pool_size=(1,2,2))(x)

print(x.shape)
##################################################### FC Layers
x = Flatten()(x)
x = Dense(128,activation='relu')(x)
x = Dropout(0.2)(x)
x = Dense(32, activation='relu')(x)

# Build the model
pred = Dense(2, activation='softmax')(x)
model = Model(inputs=inputs, outputs=pred)
model.summary()

from keras.optimizers import Adam, SGD

sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(optimizer=sgd, loss='BinaryCrossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=8, epochs=16, validation_data=(x_test, y_test))
